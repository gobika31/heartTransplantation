{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNCARZub4VgncHqf9/xhFu0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"M6P7LKpbDoW-"},"outputs":[],"source":["# Step 3: Save your Streamlit app (you can modify this block with your app code)\n","%%writefile app.py\n","import streamlit as st\n","import joblib\n","import numpy as np\n","\n","st.title(\"Heart Transplantation Prediction System\")\n","\n","st.sidebar.header(\"Select Module\")\n","module = st.sidebar.selectbox(\"Choose a module\", [\"Module 1: Donor-Recipient Matching\",\n","                                                   \"Module 2: Post-Transplant Monitoring\",\n","                                                   \"Module 3: Long-Term Survival Prediction\",\n","                                                   \"Module 4: Risk Stratification\"])\n","\n","base_path = \"/content/drive/MyDrive/dataset/\"\n","\n","if module == \"Module 1: Donor-Recipient Matching\":\n","    st.subheader(\"Predict Match Score\")\n","    model = joblib.load(base_path + \"xgb_module1_donor_recipient_matching.pkl\")\n","    input_data = st.text_area(\"Enter feature values (comma-separated)\", \"1,4,11,3,1,2013,...\")\n","    if st.button(\"Predict\"):\n","        features = np.array([list(map(float, input_data.split(\",\")))]).reshape(1, -1)\n","        score = model.predict_proba(features)[0][1]\n","        st.success(f\"Predicted Match Score: {score:.3f}\")\n","\n","elif module == \"Module 2: Post-Transplant Monitoring\":\n","    st.subheader(\"Predict 1-Year Survival Probability\")\n","    rsf = joblib.load(base_path + \"rsf_module2_post_transplant_monitoring.pkl\")\n","    input_data = st.text_area(\"Enter patient features (comma-separated)\", \"value1,value2,...\")\n","    if st.button(\"Predict\"):\n","        features = np.array([list(map(float, input_data.split(\",\")))]).reshape(1, -1)\n","        surv_probs = rsf.predict_survival_function(features, return_array=True)[0]\n","        st.success(f\"Day 365 Survival Probability: {np.interp(365, rsf.unique_times_, surv_probs):.3f}\")\n","\n","elif module == \"Module 3: Long-Term Survival Prediction\":\n","    st.subheader(\"Survival Prediction at 3, 5, 10 Years\")\n","    rsf = joblib.load(base_path + \"rsf_module3_long_term_survival.pkl\")\n","    input_data = st.text_area(\"Enter patient features (comma-separated)\", \"value1,value2,...\")\n","    if st.button(\"Predict\"):\n","        features = np.array([list(map(float, input_data.split(\",\")))]).reshape(1, -1)\n","        surv_probs = rsf.predict_survival_function(features, return_array=True)[0]\n","        for day in [1095, 1825, 3650]:\n","            prob = np.interp(day, rsf.unique_times_, surv_probs)\n","            st.write(f\"Survival Probability at {day//365} years: {prob:.3f}\")\n","\n","elif module == \"Module 4: Risk Stratification\":\n","    st.subheader(\"Predict Risk Level\")\n","    model = joblib.load(base_path + \"xgb_module4_risk_stratification.pkl\")\n","    input_data = st.text_area(\"Enter patient features (comma-separated)\", \"value1,value2,...\")\n","    if st.button(\"Predict\"):\n","        features = np.array([list(map(float, input_data.split(\",\")))]).reshape(1, -1)\n","        prediction = model.predict(features)[0]\n","        st.success(f\"Predicted Risk Level: {int(prediction)}\")\n"]}]}
